stages:
  - build
  - deploy

variables:
  IMAGE_BACKEND: kwon0528/backend
  IMAGE_FRONTEND: kwon0528/frontend
  TAG: $CI_COMMIT_REF_NAME
before_script:
  - docker --version
  - docker-compose --version

  - docker info
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

  - echo $TAG
  - mkdir -p ~/.ssh
  - echo "🔑 Set ENV"

  - echo "DOCKER_USERNAME=$DOCKER_USERNAME" >> .env
  - echo "DOCKER_PASSWORD=$DOCKER_PASSWORD" >> .env
  - echo "DEPLOY_SSH_PRIVATE_KEY=$DEPLOY_SSH_PRIVATE_KEY" >> .env

  - echo "DB_USER=$DB_USER" >> .env
  - echo "DB_PASSWD=$DB_PASSWD" >> .env
  - echo "DB_HOST=$DB_HOST" >> .env
  - echo "DB_PORT=$DB_PORT" >> .env
  - echo "DB_POOL_SIZE=$DB_POOL_SIZE" >> .env
  - echo "DB_MAX_OVERFLOW=$DB_MAX_OVERFLOW" >> .env
  - echo "DB_POOL_RECYCLE=$DB_POOL_RECYCLE" >> .env
  - echo "DB_POOL_PRE_PING=$DB_POOL_PRE_PING" >> .env

  - echo "TWILIO_ACCOUNT_SID=$TWILIO_ACCOUNT_SID" >> .env
  - echo "TWILIO_AUTH_TOKEN=$TWILIO_AUTH_TOKEN" >> .env
  - echo "TWILIO_VERIFY_SID=$TWILIO_VERIFY_SID" >> .env

  - echo "SECRET_KEY=$SECRET_KEY" >> .env
  - echo "ALGORITHM=$ALGORITHM" >> .env
  - echo "ACCESS_TOKEN_EXPIRE_MINUTES=$ACCESS_TOKEN_EXPIRE_MINUTES" >> .env
  - echo "REFRESH_TOKEN_EXPIRE_DAYS=$REFRESH_TOKEN_EXPIRE_DAYS" >> .env

  - echo "MAIL_USERNAME=$MAIL_USERNAME" >> .env
  - echo "MAIL_PASSWORD=$MAIL_PASSWORD" >> .env
  - echo "MAIL_FROM=$MAIL_FROM" >> .env
  - echo "MAIL_PORT=$MAIL_PORT" >> .env
  - echo "MAIL_SERVER=$MAIL_SERVER" >> .env

  - echo "GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID" >> .env
  - echo "GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET" >> .env
  - echo "GOOGLE_TOKEN_URL=$GOOGLE_TOKEN_URL" >> .env
  - echo "GOOGLE_USERINFO_URL=$GOOGLE_USERINFO_URL" >> .env

  - echo "KAKAO_CLIENT_ID=$KAKAO_CLIENT_ID" >> .env
  - echo "KAKAO_CLIENT_SECRET=$KAKAO_CLIENT_SECRET" >> .env
  - echo "KAKAO_REDIRECT_URI=$KAKAO_REDIRECT_URI" >> .env
  - echo "KAKAO_REST_API_KEY=$KAKAO_REST_API_KEY" >> .env

  - echo "VITE_BACKEND_URL=$VITE_BACKEND_URL" >> .env
  - echo "VITE_BACKEND_PROTOCOL=$VITE_BACKEND_PROTOCOL" >> .env
  - echo "VITE_BACKEND_IP=$VITE_BACKEND_IP" >> .env
  - echo "VITE_BACKEND_PORT=$VITE_BACKEND_PORT" >> .env

  - echo "VITE_OPENVIDU_PROTOCOL=$VITE_OPENVIDU_PROTOCOL" >> .env
  - echo "VITE_OPENVIDU_IP=$VITE_OPENVIDU_IP" >> .env
  - echo "VITE_OPENVIDU_PORT=$VITE_OPENVIDU_PORT" >> .env
  - echo "VITE_OPENVIDU_SERVER_SECRET=$VITE_OPENVIDU_SERVER_SECRET" >> .env

  - echo "REDIS_HOST=$REDIS_HOST" >> .env
  - echo "REDIS_PORT=$REDIS_PORT" >> .env

  - echo "JUPYTER_URL=$JUPYTER_URL" >> .env

  - echo "ENVIRONMENT=$ENVIRONMENT" >> .env
  - echo "FRONTEND_REDIRECT_URI=$FRONTEND_REDIRECT_URI" >> .env
  - echo "REDIRECT_URI=$REDIRECT_URI" >> .env


build_backend:
  stage: build
  tags:
    - backend-runner
  script:
    - cd Backend
    - |
      if [[ "$TAG" == "develop" ]]; then
        docker build -t $IMAGE_BACKEND:$TAG -f Dockerfile.dev .
      else
        docker build -t $IMAGE_BACKEND:$TAG -f Dockerfile.prod .
      fi
    - docker push $IMAGE_BACKEND:$TAG
  only:
    - develop
    - release
    - master

build_frontend:
  stage: build
  tags:
    - frontend-runner
  script:
    - cd Frontend
    - |
      if [[ "$TAG" == "develop" ]]; then
        docker build -t $IMAGE_FRONTEND:$TAG -f Dockerfile.dev .
      else
        docker build -t $IMAGE_FRONTEND:$TAG -f Dockerfile.prod .
      fi
    - docker push $IMAGE_FRONTEND:$TAG
  only:
    - develop
    - release
    - master

# test:
#   stage: test
#   tags:
#     - test
#   script:
#     - docker-compose -f docker-compose.yml run --rm backend bash -c "
#         uvicorn main:app --host 0.0.0.0 --port 8000 --reload --proxy-headers --forwarded-allow-ips='*'
#       "
#     - docker-compose -f docker-compose.yml run --rm frontend npm run dev
#     - docker-compose down
#   only:
#     - develop

deploy:
  stage: deploy
  tags:
    - deploy
  before_script:
    - echo "$DEPLOY_SSH_PRIVATE_KEY" > id_rsa
    - chmod 600 id_rsa
    - ssh-keygen -p -m PEM -f id_rsa -N ""  # OpenSSH 호환 변환
    - mkdir -p ~/.ssh
    - ssh-keyscan -H $SSH_HOST > ~/.ssh/known_hosts  # SSH 호스트 키 등록
    - chmod 644 ~/.ssh/known_hosts
    - ssh -i id_rsa ubuntu@$SSH_HOST "echo SSH 연결 성공"

  script:
    - |
      ssh -i id_rsa ubuntu@$SSH_HOST << EOF
      set -e
      echo "Pull docker images..."
      docker pull $IMAGE_BACKEND:$TAG || { echo "Backend pull failed! Rolling back..."; exit 1; }
      docker pull $IMAGE_FRONTEND:$TAG || { echo "Frontend pull failed! Rolling back..."; exit 1; }
      
      echo "Checking if docker-compose is running..."
      cd /home/ubuntu/S12P11B106
      if [ "$(docker ps -q)" ]; then
        echo "Stopping running services..."
        docker-compose down
      else
        echo "No running containers found."
      fi

      echo "Starting new docker-compose services..."
      docker-compose -f docker-compose.yml up -d
      EOF

  only:
    - master
    - release
